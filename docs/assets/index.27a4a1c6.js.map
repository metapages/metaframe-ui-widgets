{"version":3,"file":"index.27a4a1c6.js","sources":["../../src/lib/ButtonHelp.tsx","../../src/lib/OptionsMenu.tsx","../../src/routes/home.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  IconButton,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\";\nimport { isIframe } from \"@metapages/metaframe-hook\";\nimport { QuestionIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonHelp: React.FC<{ url?: string }> = ({ url }) => {\n  const [open, setOpen] = useState<boolean>(isIframe() ? false : true);\n\n  url = url\n    ? url\n    : `${window.location.origin}${window.location.pathname}/README.md`;\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<QuestionIcon />}\n        size=\"lg\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n      <HelpPanel url={url} isOpen={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nconst HelpPanel: React.FC<{\n  url: string;\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({ isOpen, setOpen, url }) => {\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onOverlayClick = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const iframeUrl = `https://metapages.github.io/metaframe-markdown/#?url=${url}`;\n\n  return (\n    <Drawer\n      size=\"full\"\n      placement=\"top\"\n      onClose={onClose}\n      isOpen={isOpen}\n      onOverlayClick={onOverlayClick}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton size=\"lg\" bg=\"gray.100\" />\n          <DrawerBody>\n            <iframe width=\"100%\" height=\"100%\" src={iframeUrl} />\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHashParamJson } from \"@metapages/metaframe-hook\";\nimport {\n  Box,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Select,\n  HStack,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CloseIcon, SettingsIcon } from \"@chakra-ui/icons\";\n\nexport type OptionType = \"string\" | \"boolean\" | \"option\";\n\nexport type Option = {\n  name: string;\n  displayName: string;\n  default?: string | boolean;\n  type?: OptionType; // defaults to string\n  options?: string[];\n  validator?: (val: string | boolean) => string | undefined; // undefined == 👍, string is an error message\n  map?: (val: string | boolean) => any; // convert value to proper type\n};\n\nexport const OptionsMenuButton: React.FC<{ options: Option[] }> = ({\n  options,\n}) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Metaframe settings\"\n        // @ts-ignore\n        icon={<SettingsIcon />}\n        size=\"lg\"\n        onClick={onClick}\n      />\n      <OptionsMenu isOpen={open} setOpen={setOpen} options={options} />\n    </>\n  );\n};\n\ntype GenericOptions = Record<string, string | boolean>;\n\nconst OptionsMenu: React.FC<{\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  options: Option[];\n}> = ({ isOpen, setOpen, options }) => {\n  // isOpen = true; // for debugging/developing\n\n  const [optionsInHashParams, setOptionsInHashParams] =\n    useHashParamJson<GenericOptions>(\n      \"options\",\n      Object.fromEntries(\n        options\n          .filter((o) => o.default)\n          .map((option) => [option!.name!, option!.default!])\n      )\n    );\n\n  const [localOptions, setLocalOptions] = useState<GenericOptions>(\n    optionsInHashParams || {}\n  );\n  const [errors, setErrors] =\n    useState<Record<string, string> | undefined>(undefined);\n\n  const handleOnChange = useCallback(\n    (event: any) => {\n      const { name, value } = event.target as HTMLInputElement;\n      const option = options.find((o) => o.name === name) as Option; // assume we always find one since we configured it from options\n      // save boolean true as \"1\"\n      if (!option) {\n        console.error(`No option found for name=${name}`);\n        return;\n      }\n      if (option.type === \"boolean\") {\n        setLocalOptions({ ...localOptions, [name]: value === \"1\" });\n      } else {\n        setLocalOptions({ ...localOptions, [name]: value });\n      }\n    },\n    [localOptions, setLocalOptions, options]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onCloseAndAccept = useCallback(() => {\n    // first validate if available\n    const maybeErrors: Record<string, string> = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.validator && option.type !== \"boolean\") {\n        const errorFromOption = option.validator(localOptions[key] as string);\n        if (errorFromOption) {\n          maybeErrors[key] = errorFromOption;\n        }\n      }\n    });\n    if (Object.keys(maybeErrors).length > 0) {\n      setErrors(maybeErrors);\n      return;\n    }\n    setErrors(undefined);\n\n    // assume valid!\n    // now maybe map to other values\n    const convertedOptions: GenericOptions = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option) {\n        if (option.map) {\n          convertedOptions[key] = option.map(localOptions[key]);\n        } else {\n          if (option.type === \"boolean\") {\n            convertedOptions[key] =\n              localOptions[key] === true ||\n              localOptions[key] === \"1\" ||\n              localOptions[key] === \"true\";\n          } else {\n            convertedOptions[key] = localOptions[key];\n          }\n        }\n      } else {\n        convertedOptions[key] = localOptions[key];\n      }\n    });\n\n    setOpen(!isOpen);\n    setOptionsInHashParams(convertedOptions);\n  }, [\n    setOpen,\n    isOpen,\n    options,\n    localOptions,\n    setOptionsInHashParams,\n    setErrors,\n  ]);\n\n  // preact complains in dev mode if this is moved out of a functional component\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const onKeyup = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && isOpen) onCloseAndAccept();\n    };\n    window.addEventListener(\"keyup\", onKeyup);\n    return () => {\n      window.removeEventListener(\"keyup\", onKeyup);\n    };\n  }, [onCloseAndAccept, isOpen]);\n\n  return (\n    <Drawer placement=\"top\" onClose={onCloseAndAccept} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"0px\">\n            Configure metaframe (stored in URL hash params )\n          </DrawerHeader>\n          <DrawerBody>\n            <Box\n              maxW=\"80%\"\n              p={2}\n              borderWidth=\"4px\"\n              borderRadius=\"lg\"\n              overflow=\"hidden\"\n            >\n              <Grid templateColumns=\"repeat(12, 1fr)\" gap={6}>\n                {options.map((option) => (\n                  <>\n                    <GridItem rowSpan={1} colSpan={4}>\n                      <Box\n                        w=\"100%\"\n                        h=\"100%\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"flex-end\"\n                      >\n                        <Text textAlign={\"right\"} verticalAlign=\"bottom\">\n                          {option.displayName || option.name}:\n                        </Text>\n                      </Box>\n                    </GridItem>\n                    <GridItem rowSpan={1} colSpan={8}>\n                      {\" \"}\n                      {renderInput(\n                        option,\n                        localOptions[option.name],\n                        handleOnChange\n                      )}\n                    </GridItem>\n                  </>\n                ))}\n\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={10}></GridItem>\n\n                <GridItem rowSpan={0} colSpan={2}>\n                  <HStack spacing={2} justify=\"flex-end\" direction=\"row\">\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"red\"\n                      icon={(<CloseIcon />) as any}\n                      onClick={onClose}\n                    />\n\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"green\"\n                      icon={(<CheckIcon />) as any}\n                      onClick={onCloseAndAccept}\n                    />\n                  </HStack>\n                </GridItem>\n              </Grid>\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n\nconst renderInput = (option: Option, value: any, onChange: any) => {\n  switch (option.type) {\n    case \"option\":\n      return (\n        <Select\n          name={option.name}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select option\"\n        >\n          {option.options!.map((optionChoice) => (\n            <option value={optionChoice}>{optionChoice}</option>\n          ))}\n        </Select>\n      );\n    case \"boolean\":\n      return (\n        <Switch\n          name={option.name}\n          // @ts-ignore\n          rightIcon={<CheckIcon />}\n          onChange={onChange}\n          isChecked={value === true || value === \"1\"}\n          value={value ? 0 : 1}\n        />\n      );\n    default:\n      return (\n        <Box w=\"100%\" h=\"10\">\n          <Input\n            name={option.name}\n            type=\"text\"\n            placeholder=\"\"\n            value={value}\n            onInput={onChange}\n          />\n        </Box>\n      );\n  }\n};\n","import { FunctionalComponent } from \"preact\";\nimport {\n  Flex,\n  Heading,\n  UnorderedList,\n  ListItem,\n  SimpleGrid,\n  Spacer,\n} from \"@chakra-ui/react\";\nimport { ButtonHelp, OptionsMenuButton, Option } from \"../lib\";\n\nconst options: Option[] = [\n  {\n    name: \"someoption\",\n    displayName: \"A boolean option\",\n    default: true,\n    type: \"boolean\",\n  },\n];\n\nexport const Home: FunctionalComponent = () => (\n  <SimpleGrid columns={1} spacing={10}>\n    <Flex>\n      <Heading size=\"md\">\n        This module exports these widgets (to the right)\n      </Heading>\n      <UnorderedList>\n        <ListItem>Help button showing the (rendered) local <code>./Readme.md</code> file</ListItem>\n        <ListItem>\n          Options (configurable) stored encoded in the URL hash params\n        </ListItem>\n      </UnorderedList>\n      <Spacer />\n      <ButtonHelp />\n      <OptionsMenuButton options={options} />\n    </Flex>\n  </SimpleGrid>\n);\n","import { FunctionalComponent } from \"preact\";\nimport { Home } from \"./routes/home\";\n\nexport const App: FunctionalComponent = () => {\n  return <Home />;\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { App } from \"./App\";\n\nrender(\n  <ChakraProvider>\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>\n  </ChakraProvider>,\n  document.getElementById(\"root\")!\n);\n"],"names":["useState","useCallback","DrawerOverlay","DrawerCloseButton","DrawerBody","DrawerHeader","render"],"mappings":"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"}